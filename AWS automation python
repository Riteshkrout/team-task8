def AWSMenu():
    while(1):
        print()
        print()
        print("Welcome to AWS Configuration\n\n")
        print("1]  Set a User Profile")
        print("2]  Create a KeyPair")
        print("3]  List of VPC-ids")
        print("4]  List of Subnet-ids")
        print("5]  Create a Security Group")
        print("6]  List of all Security Group IDs")
        print("7]  Add Inbound Rules to Security Group")
        print("8]  Launch Instance")
        print("9]  List of all Instances")
        print("10] Connect to an Instance")
        print("11] Stop Instances")
        print("12] Terminate Instances")
        print("13] Create an EBS Volume")
        print("14] List of all EBS Volumes")
        print("15] Attach Volume")
        print("16] Create an S3 Bucket")
        print("17] Upload File to S3 Bucket")
        print("18] Create a CloudFront Distribution")
        print("19] Exit\n\n")
        option = input("Select an option: ")
        if(option=="1"):
            os.system("aws configure")
        elif(option=="2"):
            keyName = input("Enter the KeyName: ")
            os.system(f"aws ec2 create-key-pair --key-name {keyName} --query \"KeyMaterial\" --output text > {keyName}.pem")
            print("Key has been downloaded to your current directory.")
        elif(option=="3"):
            print("VPC-ID\t\t\tDefault_VPC")
            os.system("aws ec2 describe-vpcs --query \"Vpcs[*].[VpcId,IsDefault]\" --output=text")
        elif(option=="4"):
            print("Availability Zone\t\tSubnetID\t\tVpcID")
            os.system("aws ec2 describe-subnets --query \"Subnets[*].[AvailabilityZone,SubnetId,VpcId]\" --output=text")
        elif(option=="5"):
            gname = input("Enter group_name: ")
            des = input("Enter description: ")
            os.system(f"aws ec2 create-security-group --description \"{des}\" --group-name {gname}")
        elif(option=="6"):
            os.system("aws ec2 describe-security-groups --query \"SecurityGroups[*].[GroupName,GroupId]\" --output=json")
        elif(option=="7"):
            groupID = input("Please enter the Security Group ID: ")
            protocol = input("Which protocol? ")
            port = input("Enter the port number: ")
            cidr = input("Enter the IP range to be allowed ( in CIDR notation ): ")
            os.system(f"aws ec2 authorize-security-group-ingress --group-id {groupID} --protocol {protocol} --port {port} --cidr {cidr}")
            print(f"Added {protocol} to the Inbound Rules")
        elif(option=="8"):
            imageId = input("Enter the AMI ID: ")
            instanceType = input("Enter the Instance Type: ")
            subnetId = input("Enter the Subnet-ID: ")
            sg = input("Enter the Security Group ID: ")
            keyname = input("Enter the KeyName: ")
            count = input("How many instances you want? ")
            os.system(f"aws ec2 run-instances --image-id {imageId} --count {count} --instance-type {instanceType} --key-name {keyname} --security-group-ids {sg} --subnet-id {subnetId}")
        elif(option=="9"):
            print("Instance-ID\t\tPublicIP")
            os.system("aws ec2 describe-instances --query \"Reservations[*].Instances[*].[InstanceId,PublicIpAddress]\" --output=text")
        elif(option=="10"):
            ip = input("Enter the PublicIP: ")
            keyName = input("Enter the KeyName: ")
            os.system(f"ssh -i {keyName}.pem ec2-user@{ip}")
        elif(option=="11"):
            instanceIDs = input("Enter the Instance IDs ( with space in between ): ")
            os.system(f"aws ec2 stop-instances --instance-ids {instanceIDs}")
        elif(option=="12"):
            instanceIDs = input("Enter the Instance IDs ( with space in between ): ")
            os.system(f"aws ec2 terminate-instances --instance-ids {instanceIDs}")
        elif(option=="13"):
            size = input("Enter the size: ")
            az = input("Enter the Availability Zone: ")
            name = input("Enter Tag Name: ")
            tag = "ResourceType=volume,Tags=[{Key=Name,Value="+name+"}]"
            os.system(f"aws ec2 create-volume --availability-zone {az} --size {size} --tag-specifications \"{tag}\"")
        elif(option=="14"):
            print("Displaying VolumeID,Availability Zone,Size,Tag\n")
            os.system("aws ec2 describe-volumes --query \"Volumes[*].[VolumeId,AvailabilityZone,Size,Tags[*].Value]\"")
        elif(option=="15"):
            volId = input("Enter the Volume ID: ")
            instanceID = input("Enter the Instance ID: ")
            device = input("Enter Disk Name: ")
            os.system(f"aws ec2 attach-volume --device {device} --instance-id {instanceID} --volume-id {volId}")
        elif(option=="16"):
            bucketName = input("Enter the Bucket Name: ")
            region = input("Enter the Region: ")
            os.system(f"aws s3api create-bucket --bucket {bucketName} --region {region} --create-bucket-configuration LocationConstraint={region}")
            opt= input("Do you want to make the bucket public? y or n: ")
            if(opt=="y"):
                os.system(f"aws s3api put-bucket-acl --acl public-read --bucket {bucketName}")
        elif(option=="17"):
            bucketname = input("Enter the Bucket Name: ")
            filePath = input("FileName: ")
            os.system(f"aws s3api put-object --bucket {bucketname} --body {filePath} --key {filePath}")
        elif(option=="18"):
            bn = input("Enter Bucket Name: ")
            os.system(f"aws cloudfront create-distribution --origin-domain-name {bn}.s3.amazonaws.com")
        elif(option=="19"):
            print("Exiting AWS Menu  .......Please Wait..............")
            sleep(2)
            break
